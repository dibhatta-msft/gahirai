# Alternative Makefile using standard GCC
# For development when cross-compiler is not available

AS = nasm
CC = gcc
LD = ld
OBJCOPY = objcopy

# Directories
BOOT_DIR = boot
KERNEL_DIR = kernel
INCLUDE_DIR = include
BUILD_DIR = build

# Flags
ASFLAGS = -f bin
# Use 32-bit compilation flags
CFLAGS = -std=gnu99 -ffreestanding -O2 -Wall -Wextra -I$(INCLUDE_DIR) -m32 -fno-pic -fno-stack-protector
LDFLAGS = -T $(KERNEL_DIR)/linker.ld -nostdlib -m elf_i386

# Files
BOOTLOADER = $(BUILD_DIR)/bootloader.bin
KERNEL_BIN = $(BUILD_DIR)/kernel.bin
OS_IMAGE = $(BUILD_DIR)/gahiraios.img

# Source files
BOOT_SRC = $(BOOT_DIR)/bootloader.asm
KERNEL_ASM_SRC = $(KERNEL_DIR)/kernel_entry.asm
KERNEL_C_SRC = $(wildcard $(KERNEL_DIR)/*.c)
KERNEL_OBJ = $(BUILD_DIR)/kernel_entry.o $(KERNEL_C_SRC:$(KERNEL_DIR)/%.c=$(BUILD_DIR)/%.o)

.PHONY: all clean run debug setup test-simple

all: setup $(OS_IMAGE)

test-simple: setup $(BOOTLOADER)
	@echo "Testing simple bootloader..."
	@dd if=/dev/zero of=$(BUILD_DIR)/simple.img bs=512 count=2880 2>/dev/null
	@dd if=$(BOOTLOADER) of=$(BUILD_DIR)/simple.img conv=notrunc 2>/dev/null
	@echo "Simple OS image created. Run with: qemu-system-i386 -fda build/simple.img"

setup:
	@mkdir -p $(BUILD_DIR)

# Build bootloader
$(BOOTLOADER): $(BOOT_SRC)
	$(AS) $(ASFLAGS) $< -o $@

# Build kernel entry point
$(BUILD_DIR)/kernel_entry.o: $(KERNEL_ASM_SRC)
	$(AS) -f elf32 $< -o $@

# Build kernel C files
$(BUILD_DIR)/%.o: $(KERNEL_DIR)/%.c
	$(CC) $(CFLAGS) -c $< -o $@

# Link kernel
$(KERNEL_BIN): $(KERNEL_OBJ)
	$(LD) $(LDFLAGS) -o $@ $^

# Create OS image
$(OS_IMAGE): $(BOOTLOADER) $(KERNEL_BIN)
	@echo "Creating OS image..."
	@dd if=/dev/zero of=$@ bs=512 count=2880 2>/dev/null
	@dd if=$(BOOTLOADER) of=$@ conv=notrunc 2>/dev/null
	@dd if=$(KERNEL_BIN) of=$@ seek=1 conv=notrunc 2>/dev/null

# Run in QEMU
run: $(OS_IMAGE)
	qemu-system-i386 -fda $(OS_IMAGE)

run-simple: test-simple
	qemu-system-i386 -fda $(BUILD_DIR)/simple.img

# Run in text mode (for headless environments)
run-text: $(OS_IMAGE)
	qemu-system-i386 -fda $(OS_IMAGE) -nographic -monitor none

run-simple-text: test-simple
	qemu-system-i386 -fda $(BUILD_DIR)/simple.img -nographic -monitor none

# Debug with QEMU
debug: $(OS_IMAGE)
	qemu-system-i386 -fda $(OS_IMAGE) -gdb tcp::1234 -S

debug-text: $(OS_IMAGE)
	qemu-system-i386 -fda $(OS_IMAGE) -nographic -monitor none -gdb tcp::1234 -S

# Clean build files
clean:
	rm -rf $(BUILD_DIR)

help:
	@echo "GahiraiOS Build System (Standard GCC Version)"
	@echo "Available targets:"
	@echo "  all          - Build the complete OS image"
	@echo "  test-simple  - Build just bootloader for testing"
	@echo "  run          - Run full OS in QEMU"
	@echo "  run-simple   - Run simple bootloader test"
	@echo "  run-text     - Run full OS in QEMU (text mode)"
	@echo "  run-simple-text - Run simple bootloader (text mode)"
	@echo "  debug        - Run OS in QEMU with debugging"
	@echo "  debug-text   - Run OS in QEMU with debugging (text mode)"
	@echo "  clean        - Clean build files"
	@echo "  help         - Show this help"
